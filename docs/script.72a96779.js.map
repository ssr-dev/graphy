{"version":3,"sources":["screen.js","vector.js","graph.js","algo.js","flow.js","script.js"],"names":["screen","g","x","y","width","height","inverseScreen","singleBezier","a","b","c","t","singleBezierder","singleLerp","scale","v","scalar","add","w","subtract","normsq","norm","Math","sqrt","lerp","u","bezier","bezierder","bezierinvt","l","n","dt","mag","prev","i","next","bezierinvtnt","mags","push","total","result","ll","found","bezierspl","ua","va","wa","bezierspla","beziersplb","bezierspl2","t1","t2","normal","dot","cross","transform1","o","p","transform","normalize","rescale","s","negate","moveTo","lineTo","quadraticCurveTo","q","Graph","ud","V","E","id","undefined","iud","vertices","edges","transpose","Vt","JSON","parse","stringify","Ett","Et","Object","entries","idv","edge","ide","draw","realHover","font","currentTime","Date","getTime","vertex","neighbour","A","B","M","vector","C","MM","truncateT","edgeWidth","Ap","Cp","Bp","LeftN","MiddleN","RightN","newEvents","events","time","func","fillStyle","color","beginPath","fill","ArrowT","ArrowN","extra","RightSpecialO","RightSpecialT","RightSpecialN","center","lineWidth","strokeStyle","textAlign","fillText","strokeText","arc","PI","stroke","hole","hhole","hholeColor","hhhole","hhholeColor","left","right","addVertex","callback","console","log","obj","addEdge","from","to","findIndex","standard","reverseEdgeIndex","removeVertex","index","splice","removeEdge","filter","findVertex","dist","colors","art","graph","visited","children","pre","highestMemoise","loopA","vid","highest","value","indexOf","min","findArts","originId","child","origin","length","scc","order","quotient","graphT","quotientIndex","loopB","vertexId","pop","quotientClass","dfs","timeAnimation","loop","currentLeftTime","find","currentRightTime","bfs","level","frontier","parents","levels","edgeLevel","vertexEdge","clear","capacityMatrix","flowMatrix","residueMatrix","edgeMatrix","algo","vertexIndexMapping","inverseVertexIndexMapping","source","sink","sourceOriginal","sinkOriginal","residueGraph","lastAnimationStep","getResidueGraph","init","sourceVertex","sinkVertex","ii","Array","map","capacity","createResidue","j","max","findFlow","minCf","Number","MAX_SAFE_INTEGER","edgeIndex","edgee","text","mouseX","mouseY","canvas","document","querySelector","getContext","moveVertex","moveVertexId","moveEdge","moveEdgeId","removeEdgeId","directed","bfsHover","flowMode","flow","residueMode","ModeNone","ModeBFS","ModeDFS","mode","keys","resize","clientWidth","clientHeight","updateBfs","notForced","clearRect","aspect","call","requestAnimationFrame","onkeydown","ev","keyCode","onkeyup","onclick","onmousemove","clientX","clientY","onmousedown","button","onmouseup","ed","window","oncontextmenu","onresize","alert","style"],"mappings":"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","file":"script.72a96779.js","sourceRoot":"..","sourcesContent":["export function screen(g, x, y) {\r\n    const width = g.width;\r\n    const height = g.height;\r\n    const aspect = width / height;\r\n\r\n    return [((x / aspect) + 1) * 0.5 * width, (y + 1) * 0.5 * height];\r\n}\r\n\r\nexport function inverseScreen(g, x, y) {\r\n    const width = g.width;\r\n    const height = g.height;\r\n    const aspect = width / height;\r\n\r\n    return [+((2 * x / width - 1) * aspect), +(2 * y / height - 1)];\r\n}","const singleBezier = (a, b, c, t) => {\r\n    return b + ((1 - t) ** 2) * (a - b) + (t ** 2) * (c - b);\r\n};\r\n\r\nconst singleBezierder = (a, b, c, t) => {\r\n    return 2 * (1 - t) * (b - a) + 2 * t * (c - b);\r\n};\r\n\r\nconst singleLerp = (a, b, t) => {\r\n    return (1 - t) * a + t * b;\r\n};\r\n\r\nexport function scale(v, scalar) {\r\n    return [v[0] * scalar, v[1] * scalar];\r\n};\r\n\r\nexport function add(v, w) {\r\n    return [v[0] + w[0], v[1] + w[1]];\r\n}\r\n\r\nexport function subtract(v, w) {\r\n    return [v[0] - w[0], v[1] - w[1]];\r\n}\r\n\r\nexport function normsq(v) {\r\n    return v[0] ** 2 + v[1] ** 2;\r\n}\r\n\r\nexport function norm(v) {\r\n    return Math.sqrt(v[0] ** 2 + v[1] ** 2);\r\n}\r\n\r\nexport function lerp(u, v, t) {\r\n    return [singleLerp(u[0], v[0], t), singleLerp(u[1], v[1], t)];\r\n}\r\n\r\nexport function bezier(u, v, w, t) {\r\n    return [singleBezier(u[0], v[0], w[0], t), singleBezier(u[1], v[1], w[1], t)];\r\n}\r\n\r\nexport function bezierder(u, v, w, t) {\r\n    return [singleBezierder(u[0], v[0], w[0], t), singleBezierder(u[1], v[1], w[1], t)];\r\n}\r\n\r\nexport function bezierinvt(u, v, w, l, n) {\r\n    const dt = 1 / n;\r\n    let mag = 0;\r\n\r\n    let prev = bezier(u, v, w, 0);\r\n\r\n    for (let i = 1; i <= n; i++) {\r\n        const t = i * dt;\r\n\r\n        if (mag > l) {\r\n            return t;\r\n        }\r\n\r\n        const next = bezier(u, v, w, t);\r\n        mag += norm(subtract(next, prev));\r\n        prev = next;\r\n    }\r\n\r\n    return 1;\r\n}\r\n\r\nexport function bezierinvtnt(u, v, w, l, n) {\r\n    const dt = 1 / n;\r\n    let mag = 0;\r\n    const mags = [ 0 ];\r\n\r\n    let prev = bezier(u, v, w, 0);\r\n\r\n    for (let i = 1; i <= n; i++) {\r\n        const t = i * dt;\r\n\r\n        mags.push(mag);\r\n\r\n        const next = bezier(u, v, w, t);\r\n        mag += norm(subtract(next, prev));\r\n        prev = next;\r\n    }\r\n\r\n    const total = mags[n];\r\n    const result = [];\r\n\r\n    for (const ll of l) {\r\n        let found = false;\r\n\r\n        if (ll < 0) {\r\n            ll = total + ll;\r\n\r\n            for (let i = n; i >= 0; i--) {\r\n                if (mags[i] < ll) {\r\n                    result.push(i * dt);\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!found) {\r\n                result.push(1);\r\n            }\r\n        } else {\r\n            for (let i = 0; i <= n; i++) {\r\n                if (mags[i] > ll) {\r\n                    result.push(i * dt);\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!found) {\r\n                result.push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function bezierspl(u, v, w, t) {\r\n    const ua = u;\r\n    const va = lerp(u, v, t);\r\n    const wa = bezier(u, v, w, t);\r\n    const ub = wa;\r\n    const vb = lerp(v, w, t);\r\n    const wb = w;\r\n\r\n    return [ua, va, wa, ub, vb, wb];\r\n}\r\n\r\nexport function bezierspla(u, v, w, t) {\r\n    const ua = u;\r\n    const va = lerp(u, v, t);\r\n    const wa = bezier(u, v, w, t);\r\n\r\n    return [ua, va, wa];\r\n}\r\n\r\nexport function beziersplb(u, v, w, t) {\r\n    const ub = bezier(u, v, w, t);\r\n    const vb = lerp(v, w, t);\r\n    const wb = w;\r\n\r\n    return [ub, vb, wb];\r\n}\r\n\r\nexport function bezierspl2(u, v, w, t1, t2) {\r\n    return beziersplb(...bezierspla(u, v, w, t2), t1 / t2);\r\n}\r\n\r\nexport function normal(v) {\r\n    return [-v[1], v[0]];\r\n}\r\n\r\nexport function dot(v, w) {\r\n    return v[0] * w[0] + v[1] * w[1];\r\n}\r\n\r\nexport function cross(v, w) {\r\n    return v[0] * w[1] - v[1] * w[0];\r\n}\r\n\r\nexport function transform1(o, x, p) {\r\n    return [o[0] + x[0] * p, o[1] + x[1] * p];\r\n}\r\n\r\nexport function transform(o, x, y, p) {\r\n    return [o[0] + x[0] * p[0] + y[0] * p[1], o[1] + x[1] * p[0] + y[1] * p[1]];\r\n}\r\n\r\nexport function normalize(v) {\r\n    const scale = 1 / Math.sqrt(v[0] ** 2 + v[1] ** 2);\r\n    return [ v[0] * scale, v[1] * scale ];\r\n}\r\n\r\nexport function rescale(v, s) {\r\n    const scale = 1 / Math.sqrt(v[0] ** 2 + v[1] ** 2) * s;\r\n    return [ v[0] * scale, v[1] * scale ];\r\n}\r\n\r\nexport function negate(v) {\r\n    return [ -v[0], -v[1] ];\r\n}\r\n\r\nexport function moveTo(g, transform, p) {\r\n    g.moveTo(...transform.screen(g, ...p));\r\n}\r\n\r\nexport function lineTo(g, transform, p) {\r\n    g.lineTo(...transform.screen(g, ...p));\r\n}\r\n\r\nexport function quadraticCurveTo(g, transform, p, q) {\r\n    g.quadraticCurveTo(...transform.screen(g, ...p), ...transform.screen(g, ...q));\r\n}","import * as transform from \"./screen\";\r\nimport * as vector from \"./vector\";\r\n\r\nconst bezier = (a, b, c, t) => {\r\n    return b + ((1 - t) ** 2) * (a - b) + (t ** 2) * (c - b);\r\n}\r\n\r\nexport default function Graph(ud, V, E, id) {\r\n    if (V === undefined) {\r\n        V = {};\r\n    }\r\n\r\n    if (E === undefined) {\r\n        E = {};\r\n    }\r\n\r\n    if (id === undefined) {\r\n        id = 0;\r\n    }\r\n\r\n    if (ud === undefined) {\r\n        ud = false;\r\n    }\r\n\r\n    return {\r\n        iud: function() {\r\n            return ud;\r\n        },\r\n\r\n        vertices: function() {\r\n            return V;\r\n        },\r\n\r\n        edges: function() {\r\n            return E;\r\n        },\r\n\r\n        transpose: function() {\r\n            let Vt = JSON.parse(JSON.stringify(V));\r\n            let Ett = JSON.parse(JSON.stringify(E));\r\n            let Et = {};\r\n\r\n\r\n            for (const [_, vertex] of Object.entries(Vt)) {\r\n                Et[vertex.id] = [];\r\n            }\r\n\r\n            for (const [_, vertex] of Object.entries(Vt)) {\r\n                const idv = vertex.id;\r\n                if (Ett[idv] !== undefined) {\r\n                    for (const [_, edge] of Object.entries(Ett[idv])) {\r\n                        const ide = edge.id;\r\n                        edge.id = idv;\r\n\r\n                        Et[ide].push(edge);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Graph(ud, Vt, Et, id);\r\n        },\r\n\r\n        draw: function(g, realHover) {\r\n            g.font = \"bold 18px Ubuntu\";\r\n            const currentTime = new Date().getTime();\r\n            const aspect = g.width / g.height;\r\n\r\n            for (let [id, vertex] of Object.entries(V)) {\r\n                for (let [_, edge] of Object.entries(E[id])) {\r\n                    const neighbour = edge.id;\r\n                    const A = [ V[id].x, V[id].y ];\r\n                    const B = [ V[neighbour].x, V[neighbour].y ];\r\n                    const m = vector.norm(vector.subtract(B, A));\r\n                    const M = vector.lerp(A, B, 0.5);\r\n                    const v = vector.normalize(vector.subtract(B, A));\r\n                    const n = vector.normal(v);\r\n                    const C = vector.transform1(M, n, edge.bezier);\r\n                    const MM = vector.bezier(A, C, B, 0.5);\r\n                    const offsetArrow = 0.02;\r\n                    const edgeWidth = 0.005;\r\n\r\n                    let truncateT;\r\n\r\n                    if (ud) {\r\n                        truncateT = vector.bezierinvtnt(A, C, B, [edgeWidth * 16 - offsetArrow, -edgeWidth * 16 + offsetArrow, -edgeWidth * 20 + offsetArrow], 100);\r\n                    } else {\r\n                        truncateT = vector.bezierinvtnt(A, C, B, [edgeWidth * 16 - offsetArrow, -edgeWidth * 16, -edgeWidth * 20], 100);\r\n                    }\r\n\r\n                    const [Ap, Cp, Bp] = vector.bezierspl2(A, C, B, truncateT[0], truncateT[1]);\r\n                    const [LeftN, MiddleN, RightN] = [ \r\n                        vector.normal(vector.normalize(vector.bezierder(Ap, Cp, Bp, 0))),\r\n                        vector.normal(vector.normalize(vector.bezierder(Ap, Cp, Bp, 0.5))),\r\n                        vector.normal(vector.normalize(vector.bezierder(Ap, Cp, Bp, 1))) \r\n                    ];\r\n\r\n                    const newEvents = {};\r\n\r\n                    for (const [time, func] of Object.entries(edge.events)) {\r\n                        if (currentTime > time) {\r\n                            func();\r\n                        } else {\r\n                            newEvents[time] = func;\r\n                        }\r\n                    }\r\n\r\n                    edge.events = newEvents;\r\n                    g.fillStyle = edge.color;\r\n\r\n                    g.beginPath();\r\n                    vector.moveTo(g, transform, vector.transform1(Ap, LeftN, edgeWidth));\r\n                    vector.lineTo(g, transform, vector.transform1(Ap, LeftN, -edgeWidth));\r\n                    vector.quadraticCurveTo(g, transform, vector.transform1(Cp, MiddleN, -edgeWidth), vector.transform1(Bp, RightN, -edgeWidth));\r\n                    vector.lineTo(g, transform, vector.transform1(Bp, RightN, edgeWidth));\r\n                    vector.quadraticCurveTo(g, transform, vector.transform1(Cp, MiddleN, edgeWidth), vector.transform1(Ap, LeftN, edgeWidth));\r\n                    g.fill();\r\n\r\n                    if (!ud) {\r\n                        const [ArrowT, ArrowN] = [\r\n                            vector.normal(RightN),\r\n                            RightN,\r\n                        ];\r\n\r\n                        g.beginPath();\r\n                        vector.moveTo(g, transform, vector.transform(Bp, ArrowT, ArrowN, [0, -offsetArrow]));\r\n                        vector.lineTo(g, transform, vector.transform(Bp, ArrowT, ArrowN, [0, -offsetArrow]));\r\n                        vector.lineTo(g, transform, vector.transform(Bp, ArrowT, ArrowN, [-offsetArrow * Math.sqrt(3), 0]));\r\n                        vector.lineTo(g, transform, vector.transform(Bp, ArrowT, ArrowN, [0, offsetArrow]));\r\n                        g.fill();\r\n                    }\r\n\r\n                    if ((edge.extra & 0x2) !== 0) {\r\n                        const RightSpecialO = vector.bezier(A, C, B, truncateT[2]);\r\n                        const RightSpecialT = vector.rescale(vector.bezierder(A, C, B, truncateT[1]), offsetArrow);\r\n                        const RightSpecialN = vector.normal(RightSpecialT);\r\n\r\n                        g.beginPath();\r\n                        vector.moveTo(g, transform, vector.transform(RightSpecialO, RightSpecialT, RightSpecialN, [-0.3, -1]));\r\n                        vector.lineTo(g, transform, vector.transform(RightSpecialO, RightSpecialT, RightSpecialN, [0.3, -1]));\r\n                        vector.lineTo(g, transform, vector.transform(RightSpecialO, RightSpecialT, RightSpecialN, [0.3, 1]));\r\n                        vector.lineTo(g, transform, vector.transform(RightSpecialO, RightSpecialT, RightSpecialN, [-0.3, 1]));\r\n                        vector.lineTo(g, transform, vector.transform(RightSpecialO, RightSpecialT, RightSpecialN, [-0.3, -1]));\r\n                        g.fill();\r\n                    }\r\n\r\n                    if (edge.center !== undefined && edge.center !== \"\") {\r\n                        g.lineWidth = 1;\r\n                        g.fillStyle = \"#FFFFFF\";\r\n                        g.strokeStyle = \"#000000\";\r\n                        g.textAlign = \"center\";\r\n                        g.fillText(edge.center, ...transform.screen(g, MM[0], MM[1] - 0.02));\r\n                        g.strokeText(edge.center, ...transform.screen(g, MM[0], MM[1] - 0.02));\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let [id, vertex] of Object.entries(V)) {\r\n                const newEvents = {};\r\n                for (const [time, func] of Object.entries(vertex.events)) {\r\n                    if (currentTime > time) {\r\n                        func();\r\n                    } else {\r\n                        newEvents[time] = func;\r\n                    }\r\n                }\r\n                vertex.events = newEvents;\r\n\r\n                g.fillStyle = vertex.color;\r\n\r\n                g.strokeStyle = \"#303030\";\r\n                g.lineWidth = 3;\r\n                g.beginPath();\r\n\r\n                if (vertex.id === realHover) {\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 20, 0, 2 * Math.PI);\r\n                } else {\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 16, 0, 2 * Math.PI);\r\n                }\r\n\r\n                g.fill();\r\n                g.stroke();\r\n\r\n                if (vertex.hole === true) {\r\n                    g.fillStyle = \"#FFFFFF\";\r\n                    g.beginPath();\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 4, 0, 2 * Math.PI);\r\n                    g.fill();\r\n                }\r\n\r\n                if (vertex.hhole === true) {\r\n                    g.strokeStyle = vertex.hholeColor;\r\n                    g.beginPath();\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 8, 0, 2 * Math.PI);\r\n                    g.stroke();\r\n                }\r\n\r\n                if (vertex.hhhole === true) {\r\n                    g.strokeStyle = vertex.hhholeColor;\r\n                    g.beginPath();\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 24, 0, 2 * Math.PI);\r\n                    g.stroke();\r\n                }\r\n\r\n                g.lineWidth = 1;\r\n                g.fillStyle = \"#FFFFFF\";\r\n                g.strokeStyle = \"#000000\";\r\n                g.textAlign = \"center\";\r\n                g.fillText(vertex.center, ...transform.screen(g, vertex.x, vertex.y - 0.05));\r\n                g.strokeText(vertex.center, ...transform.screen(g, vertex.x, vertex.y - 0.05));\r\n                g.textAlign = \"right\";\r\n                g.fillText(vertex.left, ...transform.screen(g, vertex.x - 0.05, vertex.y));\r\n                g.strokeText(vertex.left, ...transform.screen(g, vertex.x - 0.05, vertex.y));\r\n                g.textAlign = \"left\";\r\n                g.fillText(vertex.right, ...transform.screen(g, vertex.x + 0.05, vertex.y));\r\n                g.strokeText(vertex.right, ...transform.screen(g, vertex.x + 0.05, vertex.y));\r\n            }\r\n        },\r\n\r\n        addVertex: function(x, y, callback) {\r\n            console.log(\"Add vertex:\", id);\r\n\r\n            const obj = { x, y, id, left: \"\", center: \"\", right: \"\", color: \"#000000\", hole: false, hhole: false, events: {} };\r\n\r\n            if (callback !== undefined) {\r\n                callback(obj);\r\n            }\r\n\r\n            V[id] = obj;\r\n            E[id] = [];\r\n            id++;\r\n        },\r\n\r\n        addEdge: function(from, to, callback) {\r\n            if (from === to) {\r\n                return;\r\n            }\r\n\r\n            if (E[from] === undefined) {\r\n                E[from] = [];\r\n            }\r\n\r\n            if (E[from].findIndex(x => x.id === to) === -1) {\r\n                let obj = undefined;\r\n\r\n                if (!ud) {\r\n                    const reverseEdgeIndex = E[to].findIndex(x => x.id === from);\r\n\r\n                    if (reverseEdgeIndex !== -1 && E[to][reverseEdgeIndex].bezier === 0) {\r\n                        E[to][reverseEdgeIndex].bezier = 0.15;\r\n                        obj = { id: to, center: \"\", extra: 0, color: \"#303030\", standard: \"#303030\", bezier: 0.15, events: {} };\r\n                    } else {\r\n                        obj = { id: to, center: \"\", extra: 0, color: \"#303030\", standard: \"#303030\", bezier: 0, events: {} };\r\n                    }\r\n                } else {\r\n                    obj = { id: to, center: \"\", extra: 0, color: \"#303030\", standard: \"#303030\", bezier: 0, events: {} };\r\n                }\r\n\r\n                if (callback !== undefined) {\r\n                    callback(obj);\r\n                }\r\n\r\n                E[from].push(obj);\r\n\r\n                console.log(\"Add Edge:\", from, to);\r\n            }\r\n        },\r\n\r\n        removeVertex: function(id) {\r\n            console.log(\"Remove vertex:\", id);\r\n\r\n            for (let [_, edge] of Object.entries(E)) {\r\n                if (edge !== undefined) {\r\n                    let index = edge.findIndex(x => x.id == id);\r\n\r\n                    if (index !== -1) {\r\n                        edge.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            delete V[id];\r\n            delete E[id];\r\n        },\r\n\r\n        removeEdge: function(from, to) {\r\n            if (from === to) {\r\n                return;\r\n            }\r\n\r\n            if (E[from] === undefined) {\r\n                E[from] = [];\r\n            }\r\n\r\n            E[from] = E[from].filter(x => x.id !== to);\r\n            console.log(\"Remove Edge:\", from, to);\r\n        },\r\n\r\n        findVertex: function(x, y) {\r\n            for (let [_, vertex] of Object.entries(V)) {\r\n                let dist = Math.sqrt((x - vertex.x) ** 2 + (y - vertex.y) ** 2);\r\n\r\n                if (dist < 0.05) {\r\n                    return vertex.id;\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        },\r\n    };\r\n}","const colors = [\r\n    '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080'\r\n];\r\n\r\nexport default function() {\r\n    return {\r\n        art: function(graph) {\r\n            let visited = {};\r\n            let children = {};\r\n\r\n            let pre = [];\r\n            let highestMemoise = {};\r\n            let time = 0;\r\n\r\n            for (const [_, vertex] of Object.entries(graph.vertices())) {\r\n                vertex.hole = false;\r\n            }\r\n\r\n            const loopA = vid => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n                children[vid] = [];\r\n\r\n                pre[vid] = time;\r\n                time++;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        children[vid].push(edge.id);\r\n                        loopA(edge.id);\r\n                    }\r\n                }\r\n            };\r\n\r\n            const highest = vid => {\r\n                // Return cache if possible\r\n                if (highestMemoise[vid] !== undefined) {\r\n                    return highestMemoise[vid];\r\n                }\r\n\r\n                let value = pre[vid];\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    // Back edge\r\n                    if (children[vid].indexOf(edge.id) === -1) {\r\n                        value = Math.min(value, pre[edge.id]);\r\n                    // Tree edge\r\n                    } else {\r\n                        value = Math.min(value, highest(edge.id));\r\n                    }\r\n                }\r\n\r\n                // Memoise\r\n                highestMemoise[vid] = value;\r\n                return value;\r\n            };\r\n\r\n            const findArts = (originId, vid) => {\r\n                for (let child of children[vid]) {\r\n                    if (highest(child) >= pre[vid] && vid !== originId) {\r\n                        graph.vertices()[vid].hole = true;\r\n                        // console.log(\"Tree: \", highestMemoise, pre);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for (let child of children[vid]) {\r\n                    findArts(originId, child);\r\n                }\r\n            }\r\n\r\n            for (const[_, origin] of Object.entries(graph.vertices())) {\r\n                let originId = origin.id;\r\n\r\n                pre = [];\r\n                time = 0;\r\n\r\n                if (visited[originId] === undefined) {\r\n                    loopA(originId);\r\n\r\n                    // Check root case\r\n                    if (children[originId].length >= 2) {\r\n                        origin.hole = true;\r\n                        // console.log(\"Root: \", children[originId]);\r\n                    }\r\n\r\n                    // Find arts\r\n                    findArts(originId, originId);\r\n                }\r\n            }\r\n        },\r\n\r\n        scc: function(graph) {\r\n            let visited = {};\r\n            let order = [];\r\n            let quotient = [];\r\n\r\n            const loopA = vid => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        loopA(edge.id);\r\n                    }\r\n                }\r\n\r\n                order.push(vid);\r\n            };\r\n\r\n            for (const[_, origin] of Object.entries(graph.vertices())) {\r\n                let originId = origin.id;\r\n\r\n                if (visited[originId] === undefined) {\r\n                    loopA(originId);\r\n                }\r\n            }\r\n\r\n            let graphT = graph.transpose();\r\n            let quotientIndex = 0;\r\n            visited = {};\r\n\r\n            const loopB = (quotientIndex, vid) => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n\r\n                for (const [_, edge] of Object.entries(graphT.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        loopB(quotientIndex, edge.id);\r\n                    }\r\n                }\r\n\r\n                quotient[quotientIndex].push(vid);\r\n            };\r\n\r\n            while (order.length > 0) {\r\n                const vertexId = order.pop();\r\n\r\n                if (visited[vertexId] === undefined) {\r\n                    quotient[quotientIndex] = [];\r\n                    loopB(quotientIndex, vertexId);\r\n                    quotientIndex++;\r\n                }\r\n            }\r\n\r\n            for (const [quotientIndex, quotientClass] of quotient.entries()) {\r\n                for (const vertexId of quotientClass) {\r\n                    graph.vertices()[vertexId].color = colors[quotient.length - 1 - quotientIndex];\r\n                }\r\n            }\r\n        },\r\n\r\n        dfs: function(graph, origin) {\r\n            let visited = {};\r\n            let time = 0;\r\n            let timeAnimation = new Date().getTime();\r\n            const timeAnimationStep = 300;\r\n\r\n            const loop = vid => {\r\n                const v = graph.vertices()[vid];\r\n                time++;\r\n\r\n                visited[vid] = true;\r\n\r\n                const currentLeftTime = time;\r\n                v.events[timeAnimation] = () => {\r\n                    v.left = currentLeftTime;\r\n                    v.hhole = true;\r\n                    v.hholeColor = \"#000000\";\r\n                };\r\n\r\n                timeAnimation += timeAnimationStep;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        edge.events[timeAnimation] = () => {\r\n                            edge.color = \"#0000FF\";\r\n                            edge.extra = 2;\r\n                        };\r\n\r\n                        if (graph.iud()) {\r\n                            graph.edges()[edge.id].find(x => x.id === vid).color = \"#0000FF\";\r\n                        }\r\n\r\n                        loop(edge.id);\r\n\r\n                        timeAnimation += timeAnimationStep;\r\n                    }\r\n                }\r\n\r\n                time++;\r\n                timeAnimation += timeAnimationStep;\r\n\r\n                const currentRightTime = time;\r\n                v.events[timeAnimation] = () => {\r\n                    v.right = currentRightTime;\r\n                    v.hhole = true;\r\n                    v.hholeColor = \"#FFFFFF\";\r\n                };\r\n            };\r\n\r\n            loop(origin.id);\r\n        },\r\n\r\n        bfs: function(graph, origin) {\r\n            let level = 1;\r\n\r\n            let visited = {};\r\n            visited[origin.id] = true;\r\n\r\n            let frontier = [ origin.id ];\r\n            let next = [];\r\n            let parents = {};\r\n            let levels = {};\r\n\r\n            let time = 0;\r\n            let timeAnimation = new Date().getTime();\r\n            const timeAnimationStep = 300;\r\n\r\n            parents[origin.id] = -1;\r\n            levels[origin.id] = 0;\r\n\r\n            origin.events[timeAnimation] = () => {\r\n                origin.hhole = true;\r\n                origin.hholeColor = \"#FFFFFF\";\r\n                origin.center = 0;\r\n            };\r\n\r\n            while (frontier.length > 0) {\r\n                timeAnimation += timeAnimationStep;\r\n\r\n                for (const vertexId of frontier) {\r\n                    for (const [_, edge] of Object.entries(graph.edges()[vertexId])) {\r\n                        if (visited[edge.id] === undefined) {\r\n                            visited[edge.id] = true;\r\n                            next.push(edge.id);\r\n                            const edgeLevel = level;\r\n\r\n                            edge.events[timeAnimation] = () => {\r\n                                edge.color = \"#0000FF\";\r\n                                edge.extra = 2;\r\n                            };\r\n\r\n                            const vertexEdge = graph.vertices()[edge.id];\r\n                            vertexEdge.events[timeAnimation] = () => {\r\n                                vertexEdge.hhole = true;\r\n                                vertexEdge.hholeColor = \"#FFFFFF\";\r\n                                vertexEdge.center = edgeLevel;\r\n                            };\r\n\r\n                            levels[edge.id] = level;\r\n                            parents[edge.id] = vertexId;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                frontier = next;\r\n                next = [];\r\n                level++;\r\n            }\r\n\r\n            return {\r\n                visited,\r\n                parents,\r\n                levels,\r\n                timeAnimation\r\n            };\r\n        },\r\n\r\n        clear: function(graph) {\r\n            for (const [_, vertex] of Object.entries(graph.vertices())) {\r\n                vertex.left = \"\";\r\n                vertex.center = \"\";\r\n                vertex.right = \"\";\r\n                vertex.events = {};\r\n                vertex.hhole = false;\r\n\r\n                if (graph.edges()[vertex.id] !== undefined) {\r\n                    for (const [__, edge] of Object.entries(graph.edges()[vertex.id])) {\r\n                        edge.extra = 0;\r\n                        edge.color = edge.standard;\r\n                        edge.time = 0;\r\n                        edge.events = {};\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import graph_ from \"./graph\";\r\nimport algo_ from \"./algo\";\r\n\r\nexport default function(graph) {\r\n    let capacityMatrix ;\r\n    let flowMatrix;\r\n    let residueMatrix;\r\n    let edgeMatrix;\r\n    const algo = algo_();\r\n\r\n    let vertexIndexMapping = {};\r\n    let inverseVertexIndexMapping = {};\r\n    let source = undefined;\r\n    let sink = undefined;\r\n    let sourceOriginal = undefined;\r\n    let sinkOriginal = undefined;\r\n\r\n    let residueGraph = undefined;\r\n    let lastAnimationStep = 0;\r\n\r\n    return {\r\n        getResidueGraph: function() {\r\n            return residueGraph;\r\n        },\r\n\r\n        init: function(sourceVertex, sinkVertex) {\r\n            if (sourceVertex === undefined || sinkVertex === undefined) {\r\n                return false;\r\n            }\r\n\r\n            let ii = 0;\r\n            for (let [_, vertex] of Object.entries(graph.vertices())) {\r\n                inverseVertexIndexMapping[ii] = vertex.id;\r\n                vertexIndexMapping[vertex.id] = ii++;\r\n            }\r\n            const n = ii;\r\n\r\n            capacityMatrix = new Array(n).fill(0).map(x => new Array(n).fill(0));\r\n            flowMatrix = new Array(n).fill(0).map(x => new Array(n).fill(0));\r\n            residueMatrix = new Array(n).fill(0).map(x => new Array(n).fill(0));\r\n            edgeMatrix = new Array(n).fill(0).map(x => new Array(n).fill(undefined));\r\n\r\n            for (let [_, vertex] of Object.entries(graph.vertices())) {\r\n                for (let [_, edge] of Object.entries(graph.edges()[vertex.id])) {\r\n                    capacityMatrix[vertexIndexMapping[vertex.id]][vertexIndexMapping[edge.id]] = +edge.capacity;\r\n                    edgeMatrix[vertexIndexMapping[vertex.id]][vertexIndexMapping[edge.id]] = edge;\r\n                    edge.center = \"0/\" + edge.capacity;\r\n                }\r\n            }\r\n\r\n            sourceOriginal = sourceVertex;\r\n            sinkOriginal = sinkVertex;\r\n            this.createResidue();\r\n\r\n            return true;\r\n        },\r\n\r\n        createResidue: function() {\r\n            residueGraph = graph_();\r\n\r\n            const n = Object.entries(graph.vertices()).length;\r\n            for (let i = 0; i < n; i++) {\r\n                const vertex = graph.vertices()[inverseVertexIndexMapping[i]];\r\n                residueGraph.addVertex(vertex.x, 1 + vertex.y, v => {\r\n                    v.color = vertex.color;\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                for (let j = 0; j < n; j++) {\r\n                    residueMatrix[i][j] = Math.max(0, capacityMatrix[i][j] - flowMatrix[i][j]);\r\n                    if (residueMatrix[i][j] > 0) {\r\n                        residueGraph.addEdge(i, j, edge => {\r\n                            edge.center = residueMatrix[i][j];\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            source = residueGraph.vertices()[vertexIndexMapping[sourceOriginal.id]];\r\n            sink = residueGraph.vertices()[vertexIndexMapping[sinkOriginal.id]];\r\n        },\r\n\r\n        findFlow: function() {\r\n            const currentTime = new Date().getTime();\r\n            if (currentTime < lastAnimationStep) {\r\n                return;\r\n            }\r\n\r\n            if (residueMatrix === undefined) {\r\n                return;\r\n            }\r\n\r\n            this.createResidue();\r\n\r\n            algo.clear(graph);\r\n            const result = algo.bfs(residueGraph, source);\r\n            const timeAnimationStep = 300;\r\n            let timeAnimation = result.timeAnimation;\r\n\r\n            if (result.visited[sink.id]) {\r\n                let prev = sink.id;\r\n                let minCf = Number.MAX_SAFE_INTEGER;\r\n                for (let i = result.parents[sink.id]; i !== -1;) {\r\n                    minCf = Math.min(residueMatrix[i][prev], minCf);\r\n                    prev = i;\r\n                    i = result.parents[i];\r\n                }\r\n\r\n                prev = sink.id;\r\n                for (let i = result.parents[sink.id]; i !== -1;) {\r\n                    flowMatrix[i][prev] += minCf;\r\n                    flowMatrix[prev][i] = -residueMatrix[i][prev];\r\n\r\n                    const edgeIndex = residueGraph.edges()[i].findIndex(x => x.id === prev);\r\n                    const edge = residueGraph.edges()[i][edgeIndex];\r\n\r\n                    timeAnimation += timeAnimationStep;\r\n                    edge.events[timeAnimation] = () => {\r\n                        edge.color = \"#FF0000\";\r\n                    };\r\n\r\n                    if (edgeMatrix[i][prev] !== undefined) {\r\n                        const edgee = edgeMatrix[i][prev];\r\n                        const text = flowMatrix[i][prev] + \"/\" + capacityMatrix[i][prev];\r\n\r\n                        edge.events[timeAnimation + 1] = () => {\r\n                            edgee.center = text;\r\n                            edgee.color = \"#FF0000\";\r\n                        }\r\n                    }\r\n\r\n                    if (edgeMatrix[prev][i] !== undefined) {\r\n                        const edgee = edgeMatrix[prev][i];\r\n                        const text = flowMatrix[prev][i] + \"/\" + capacityMatrix[prev][i];\r\n\r\n                        edge.events[timeAnimation + 2] = () => {\r\n                            edgee.center = text;\r\n                            edgee.color = \"#FF0000\";\r\n                        }\r\n                    }\r\n\r\n                    prev = i;\r\n                    i = result.parents[i];\r\n                }\r\n            }\r\n\r\n            lastAnimationStep = timeAnimation + 300;\r\n        }\r\n    }\r\n}","import graph_ from \"./graph\";\r\nimport algo_ from \"./algo\";\r\nimport flow_ from \"./flow\";\r\nimport * as transform from \"./screen\";\r\nimport * as vector from \"./vector\";\r\n\r\nconst canvas = document.querySelector(\"#canvas\");\r\nconst g = canvas.getContext(\"2d\");\r\nlet graph = graph_();\r\nconst algo = algo_();\r\nlet moveVertex = false;\r\nlet moveVertexId = undefined;\r\nlet moveEdge = false;\r\nlet moveEdgeId = undefined;\r\nlet removeEdge = false;\r\nlet removeEdgeId = undefined;\r\nlet directed = true;\r\n\r\nlet bfsHover = undefined;\r\nlet realHover = undefined;\r\n\r\nlet mouseX;\r\nlet mouseY;\r\nlet flowMode = false;\r\nlet flow = undefined;\r\n\r\nlet sourceVertex = undefined;\r\nlet sinkVertex = undefined;\r\nlet residueMode = false;\r\n\r\nconst ModeNone = 0;\r\nconst ModeBFS = 1;\r\nconst ModeDFS = 2;\r\n\r\nlet mode = ModeNone;\r\n\r\nlet keys = [];\r\n\r\nconst resize = () => {\r\n    g.width = canvas.clientWidth;\r\n    g.height = canvas.clientHeight;\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n}\r\n\r\nconst updateBfs = (notForced) => {\r\n    if (residueMode) {\r\n        return;\r\n    }\r\n\r\n    let [x, y] = [mouseX, mouseY];\r\n\r\n    if (moveVertex) {\r\n        graph.vertices()[moveVertexId].x = x;\r\n        graph.vertices()[moveVertexId].y = y;\r\n    }\r\n\r\n    if (notForced === undefined) {\r\n        if (!directed) {\r\n            algo.art(graph);\r\n        }\r\n        algo.scc(graph);\r\n    }\r\n\r\n    const vertexId = graph.findVertex(x, y);\r\n    if (vertexId !== undefined) {\r\n        if (bfsHover !== vertexId || bfsHover === undefined) {\r\n            algo.clear(graph);\r\n            if (mode === ModeDFS) {\r\n                algo.dfs(graph, graph.vertices()[vertexId]);\r\n                algo.scc(graph);\r\n                if (!directed) {\r\n                    algo.art(graph);\r\n                }\r\n                bfsHover = vertexId;\r\n            } else if (mode === ModeBFS) {\r\n                algo.bfs(graph, graph.vertices()[vertexId]);\r\n                algo.scc(graph);\r\n                if (!directed) {\r\n                    algo.art(graph);\r\n                }\r\n                bfsHover = vertexId;\r\n            }\r\n        }\r\n    } else {\r\n        algo.clear(graph);\r\n        bfsHover = undefined;\r\n    }\r\n}\r\n\r\nconst loop = () => {\r\n    g.clearRect(0, 0, g.width, g.height);\r\n    const aspect = g.width / g.height;\r\n\r\n    if (moveEdge || removeEdge) {\r\n        let [x, y] = [mouseX, mouseY];\r\n\r\n        if (moveEdge) {\r\n            g.strokeStyle = \"#000000\";\r\n        } else {\r\n            g.strokeStyle = \"#FF0000\";\r\n        }\r\n\r\n        g.beginPath();\r\n\r\n        if (moveEdge) {\r\n            g.moveTo(...transform.screen(g, graph.vertices()[moveEdgeId].x, graph.vertices()[moveEdgeId].y));\r\n        } else {\r\n            g.moveTo(...transform.screen(g, graph.vertices()[removeEdgeId].x, graph.vertices()[removeEdgeId].y));\r\n        }\r\n\r\n        g.lineTo(...transform.screen(g, x, y));\r\n        g.stroke();\r\n    }\r\n\r\n    if (flowMode) {\r\n        g.strokeStyle = \"#606060\";\r\n        g.beginPath();\r\n        vector.moveTo(g, transform, [-aspect, 0]);\r\n        vector.lineTo(g, transform, [aspect, 0]);\r\n        g.stroke();\r\n    }\r\n\r\n    graph.draw(g, realHover);\r\n\r\n    if (flow !== undefined && flow.getResidueGraph() !== undefined) {\r\n        flow.getResidueGraph().draw(g);\r\n    }\r\n};\r\n\r\nconst call = () => {\r\n    loop();\r\n    requestAnimationFrame(call);\r\n};\r\n\r\ndocument.onkeydown = ev => {\r\n    keys[ev.keyCode] = true;\r\n};\r\n\r\ndocument.onkeyup = ev => {\r\n    keys[ev.keyCode] = undefined;\r\n\r\n    if (ev.keyCode === 89) {\r\n        if (residueMode) {\r\n            return;\r\n        }\r\n\r\n        graph = graph.transpose();\r\n        bfsHover = undefined;\r\n        updateBfs();\r\n    }\r\n};\r\n\r\ndocument.onclick = ev => {\r\n\r\n};\r\n\r\ndocument.onmousemove = ev => {\r\n    if (residueMode) {\r\n        return;\r\n    }\r\n\r\n    [mouseX, mouseY] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n    updateBfs(true);\r\n\r\n    realHover = graph.findVertex(mouseX, mouseY);\r\n};\r\n\r\ndocument.onmousedown = ev => {\r\n    if (residueMode) {\r\n        return;\r\n    }\r\n\r\n    let [x, y] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n\r\n    [mouseX, mouseY] = [x, y];\r\n\r\n    if (ev.button) {\r\n        if (keys[17] === undefined && keys[16] === undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            moveVertexId = graph.findVertex(x, y);\r\n\r\n            if (moveVertexId !== undefined) {\r\n                moveVertex = true;\r\n            }\r\n        }\r\n    } else {\r\n        if (keys[17] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            moveEdgeId = graph.findVertex(x, y);\r\n\r\n            if (moveEdgeId !== undefined) {\r\n                moveEdge = true;\r\n            }\r\n        } else if (keys[16] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            removeEdgeId = graph.findVertex(x, y);\r\n\r\n            if (removeEdgeId !== undefined) {\r\n                removeEdge = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    bfsHover = undefined;\r\n    updateBfs();\r\n};\r\n\r\ndocument.onmouseup = ev => {\r\n    if (residueMode) {\r\n        return;\r\n    }\r\n\r\n    let [x, y] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n\r\n    if (keys[16] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n        const vertexId = graph.findVertex(x, y);\r\n        if (vertexId !== undefined) {\r\n            graph.removeVertex(vertexId);\r\n        }\r\n    } else if (keys[17] !== undefined && !moveVertex && !moveEdge && !removeEdge && ev.button) {\r\n        if (y < 0 || !flowMode) {\r\n            graph.addVertex(x, y);\r\n        }\r\n    } else if (keys[83] !== undefined && flowMode) {\r\n        const vertexId = graph.findVertex(x, y);\r\n        if (vertexId !== undefined) {\r\n            if (sourceVertex !== undefined) {\r\n                sourceVertex.hhhole = false;\r\n            }\r\n\r\n            const vertex = graph.vertices()[vertexId];\r\n            vertex.hhhole = true;\r\n            vertex.hhholeColor = \"#841210\";\r\n            sourceVertex = vertex;\r\n        }\r\n    } else if (keys[84] !== undefined && flowMode) {\r\n        const vertexId = graph.findVertex(x, y);\r\n        if (vertexId !== undefined) {\r\n            if (sinkVertex !== undefined) {\r\n                sinkVertex.hhhole = false;\r\n            }\r\n\r\n            const vertex = graph.vertices()[vertexId];\r\n            vertex.hhhole = true;\r\n            vertex.hhholeColor = \"#136207\";\r\n            sinkVertex = vertex;\r\n        }\r\n    }\r\n\r\n    if (ev.button) {\r\n        moveVertex = false;\r\n    } else {\r\n        if (!moveVertex && moveEdge && !removeEdge) {\r\n            const vertexId = graph.findVertex(x, y);\r\n            const capacity = flowMode ? document.querySelector(\"#textFlow\").value : undefined;\r\n            const flow = 0;\r\n\r\n            if (vertexId !== undefined) {\r\n                if (directed) {\r\n                    graph.addEdge(moveEdgeId, vertexId, ed => { ed.capacity = capacity; ed.center = capacity });\r\n                } else {\r\n                    graph.addEdge(moveEdgeId, vertexId, ed => { ed.capacity = capacity; ed.center = capacity });\r\n                    graph.addEdge(vertexId, moveEdgeId, ed => { ed.capacity = capacity; ed.center = capacity });\r\n                }\r\n            }\r\n        } else if (!moveVertex && !moveEdge && removeEdge) {\r\n            const vertexId = graph.findVertex(x, y);\r\n            if (vertexId !== undefined) {\r\n                if (directed) {\r\n                    graph.removeEdge(removeEdgeId, vertexId);\r\n                } else {\r\n                    graph.removeEdge(vertexId, removeEdgeId);\r\n                    graph.removeEdge(removeEdgeId, vertexId);\r\n                }\r\n            }\r\n        }\r\n\r\n        moveEdge = false;\r\n        removeEdge = false;\r\n    }\r\n\r\n    bfsHover = undefined;\r\n    updateBfs();\r\n};\r\n\r\nwindow.oncontextmenu = ev => {\r\n    return false;\r\n};\r\n\r\nwindow.onresize = () => {\r\n    resize();\r\n};\r\n\r\ndocument.querySelector(\"#buttonHelp\").onclick = () => {\r\n    alert(`\r\n        ==== CONTROLS ====\r\n        LMB = Move Camera\r\n        CTRL + LMB = Add Edge\r\n        SHIFT + LMB = Remove Edge\r\n        RMB = Move Vertex\r\n        CTRL + RMB = Add Vertex\r\n        SHIFT + RMB = Remove Vertex\r\n        S + LMB = Set Source | T + LMB = Set Sink\r\n        Flow Button -> *Build graph* -> Residue Button -> Repeat Step Button\r\n    `);\r\n};\r\n\r\ndocument.querySelector(\"#buttonClear\").onclick = () => {\r\n    graph = graph_();\r\n    residueMode = false;\r\n};\r\n\r\ndocument.querySelector(\"#buttonDirected\").onclick = () => {\r\n    graph = graph_();\r\n    directed = true;\r\n    residueMode = false;\r\n\r\n    document.querySelector(\"#buttonFlow\").style = \"display: block\";\r\n};\r\n\r\ndocument.querySelector(\"#buttonUndirected\").onclick = () => {\r\n    graph = graph_(true);\r\n    directed = false;\r\n    residueMode = false;\r\n\r\n    document.querySelector(\"#buttonFlow\").style = \"display: none\";\r\n    document.querySelector(\"#textFlow\").style = \"display: none\";\r\n    document.querySelector(\"#buttonStep\").style = \"display: none\";\r\n    document.querySelector(\"#buttonResidue\").style = \"display: none\";\r\n\r\n    flow = undefined;\r\n    sourceVertex = undefined;\r\n    sinkVertex = undefined;\r\n    residueMode = false;\r\n    flowMode = false;\r\n};\r\n\r\ndocument.querySelector(\"#buttonBFS\").onclick = () => {\r\n    mode = ModeBFS;\r\n    updateBfs();\r\n};\r\n\r\ndocument.querySelector(\"#buttonDFS\").onclick = () => {\r\n    mode = ModeDFS;\r\n    updateBfs();\r\n};\r\n\r\ndocument.querySelector(\"#buttonNone\").onclick = () => {\r\n    mode = ModeNone;\r\n    updateBfs();\r\n};\r\n\r\ndocument.querySelector(\"#buttonFlow\").onclick = () => {\r\n    if (!directed) {\r\n        return;\r\n    }\r\n\r\n    flowMode = !flowMode;\r\n    if (flowMode) {\r\n        graph = graph_(!directed, undefined, undefined, undefined, true);\r\n        document.querySelector(\"#textFlow\").style = \"display: block\";\r\n        document.querySelector(\"#buttonStep\").style = \"display: block\";\r\n        document.querySelector(\"#buttonResidue\").style = \"display: block\";\r\n        flow = flow_(graph);\r\n    } else {\r\n        graph = graph_(!directed);\r\n        document.querySelector(\"#textFlow\").style = \"display: none\";\r\n        document.querySelector(\"#buttonStep\").style = \"display: none\";\r\n        document.querySelector(\"#buttonResidue\").style = \"display: none\";\r\n        flow = undefined;\r\n        sourceVertex = undefined;\r\n        sinkVertex = undefined;\r\n    }\r\n\r\n    residueMode = false;\r\n};\r\n\r\ndocument.querySelector(\"#buttonResidue\").onclick = () => {\r\n    const res = flow.init(sourceVertex, sinkVertex);\r\n    if (res) {\r\n        residueMode = true;\r\n    }\r\n};\r\n\r\ndocument.querySelector(\"#buttonStep\").onclick = () => {\r\n    if (residueMode) {\r\n        flow.findFlow();\r\n    }\r\n};\r\n\r\nresize();\r\ncall();"]}