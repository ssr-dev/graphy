{"version":3,"sources":["screen.js","graph.js","algo.js","script.js"],"names":["screen","g","x","y","width","height","inverseScreen","bezier","a","b","c","t","Graph","ud","V","E","id","undefined","iud","vertices","edges","transpose","Vt","JSON","parse","stringify","Ett","Et","Object","entries","idv","edge","ide","push","draw","realHover","font","vertex","neighbour","ax","ay","bx","by","mx","my","nux","nuy","nma","Math","sqrt","uy","dx","dy","lx","ly","rx","ry","cx","cy","strokeStyle","color","fillStyle","beginPath","moveTo","transform","quadraticCurveTo","stroke","arc","PI","fill","extra","fillText","label","center","strokeStyte","lineWidth","hole","textAlign","left","right","addVertex","console","log","addEdge","from","to","findIndex","reverseEdgeIndex","removeVertex","index","splice","removeEdge","filter","findVertex","dist","colors","art","graph","visited","children","pre","highestMemoise","time","loopA","vid","highest","value","indexOf","min","findArts","originId","child","origin","length","scc","order","quotient","graphT","quotientIndex","loopB","vertexId","pop","quotientClass","dfs","loop","v","find","bfs","level","frontier","next","clear","mouseX","mouseY","canvas","document","querySelector","getContext","algo","moveVertex","moveVertexId","moveEdge","moveEdgeId","removeEdgeId","directed","bfsHover","ModeNone","ModeBFS","ModeDFS","mode","keys","resize","clientWidth","clientHeight","updateBfs","notForced","clearRect","lineTo","call","requestAnimationFrame","onkeydown","ev","keyCode","onkeyup","onclick","onmousemove","clientX","clientY","onmousedown","button","onmouseup","window","oncontextmenu","onresize","alert"],"mappings":"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","file":"script.0385d48f.js","sourceRoot":"..","sourcesContent":["export function screen(g, x, y) {\r\n    const width = g.width;\r\n    const height = g.height;\r\n    const aspect = width / height;\r\n\r\n    return [((x / aspect) + 1) * 0.5 * width, (y + 1) * 0.5 * height];\r\n}\r\n\r\nexport function inverseScreen(g, x, y) {\r\n    const width = g.width;\r\n    const height = g.height;\r\n    const aspect = width / height;\r\n\r\n    return [+((2 * x / width - 1) * aspect), +(2 * y / height - 1)];\r\n}","import * as transform from \"./screen\";\r\n\r\nconst bezier = (a, b, c, t) => {\r\n    return b + ((1 - t) ** 2) * (a - b) + (t ** 2) * (c - b);\r\n}\r\n\r\nexport default function Graph(ud, V, E, id) {\r\n    if (V === undefined) {\r\n        V = {};\r\n    }\r\n\r\n    if (E === undefined) {\r\n        E = {};\r\n    }\r\n\r\n    if (id === undefined) {\r\n        id = 0;\r\n    }\r\n\r\n    if (ud === undefined) {\r\n        ud = false;\r\n    }\r\n\r\n    return {\r\n        iud: () => {\r\n            return ud;\r\n        },\r\n\r\n        vertices: () => {\r\n            return V;\r\n        },\r\n\r\n        edges: () => {\r\n            return E;\r\n        },\r\n\r\n        transpose: () => {\r\n            let Vt = JSON.parse(JSON.stringify(V));\r\n            let Ett = JSON.parse(JSON.stringify(E));\r\n            let Et = {};\r\n\r\n\r\n            for (const [_, vertex] of Object.entries(Vt)) {\r\n                Et[vertex.id] = [];\r\n            }\r\n\r\n            for (const [_, vertex] of Object.entries(Vt)) {\r\n                const idv = vertex.id;\r\n                if (Ett[idv] !== undefined) {\r\n                    for (const [_, edge] of Object.entries(Ett[idv])) {\r\n                        const ide = edge.id;\r\n                        edge.id = idv;\r\n\r\n                        Et[ide].push(edge);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return Graph(ud, Vt, Et, id);\r\n        },\r\n\r\n        draw: (g, realHover) => {\r\n            g.font = \"15px Arial\";\r\n\r\n            for (let [id, vertex] of Object.entries(V)) {\r\n                for (let [_, edge] of Object.entries(E[id])) {\r\n                    const neighbour = edge.id;\r\n                    const [ax, ay, bx, by] = [V[id].x, V[id].y, V[neighbour].x, V[neighbour].y];\r\n\r\n                    const [mx, my] = [ax * 0.5 + bx * 0.5, ay * 0.5 + by * 0.5];\r\n                    const [nux, nuy] = [-(my - by), mx - bx];\r\n                    const nma = 1.0 / Math.sqrt(nux ** 2 + nuy ** 2);\r\n                    const [ux, uy] = [nux * nma, nuy * nma];\r\n                    const [dx, dy] = [mx + ux * edge.bezier, my + uy * edge.bezier];\r\n\r\n                    const [lx, ly] = [bezier(ax, dx, bx, 0.85), bezier(ay, dy, by, 0.85)];\r\n                    const [rx, ry] = [bezier(ax, dx, bx, 0.15), bezier(ay, dy, by, 0.15)];\r\n                    const [cx, cy] = [bezier(ax, dx, bx, 0.5), bezier(ay, dy, by, 0.5)];\r\n\r\n                    g.strokeStyle = edge.color;\r\n                    g.fillStyle = \"#000000\";\r\n\r\n                    g.beginPath();\r\n                    g.moveTo(...transform.screen(g, ax, ay));\r\n                    g.quadraticCurveTo(...transform.screen(g, dx, dy), ...transform.screen(g, bx, by))\r\n                    g.stroke();\r\n\r\n                    g.strokeStyle = \"#000000\";\r\n\r\n                    if (!ud) {\r\n                        g.beginPath();\r\n                        g.arc(...transform.screen(g, lx, ly), 5, 0, 2 * Math.PI);\r\n                        g.fill();\r\n                    }\r\n\r\n                    g.fillStyle = \"#FF0000\";\r\n                    if ((edge.extra & 0x1) !== 0) {\r\n                        g.beginPath();\r\n                        g.arc(...transform.screen(g, lx, ly), 3, 0, 2 * Math.PI);\r\n                        g.fill();\r\n                    }\r\n\r\n                    if ((edge.extra & 0x2) !== 0) {\r\n                        g.beginPath();\r\n                        g.arc(...transform.screen(g, rx, ry), 3, 0, 2 * Math.PI);\r\n                        g.fill();\r\n                    }\r\n\r\n                    g.fillStyle = \"#000000\";\r\n                    g.fillText(edge.label, ...transform.screen(g, lx, ly - 0.05));\r\n                    g.fillText(edge.center, ...transform.screen(g, cx, cy - 0.05));\r\n                }\r\n            }\r\n\r\n            for (let [id, vertex] of Object.entries(V)) {\r\n                g.fillStyle = vertex.color;\r\n\r\n                g.strokeStyte = \"#000000\";\r\n                g.lineWidth = 1.5;\r\n                g.beginPath();\r\n\r\n                if (vertex.id === realHover) {\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 15, 0, 2 * Math.PI);\r\n                } else {\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 10, 0, 2 * Math.PI);\r\n                }\r\n\r\n                g.fill();\r\n                g.stroke();\r\n\r\n                if (vertex.hole === true) {\r\n                    g.fillStyle = \"#FFFFFF\";\r\n                    g.beginPath();\r\n                    g.arc(...transform.screen(g, vertex.x, vertex.y), 4, 0, 2 * Math.PI);\r\n                    g.fill();\r\n                }\r\n\r\n                g.lineWidth = 1;\r\n                g.fillStyle = \"#000000\";\r\n                g.textAlign = \"center\";\r\n                g.fillText(vertex.center, ...transform.screen(g, vertex.x, vertex.y - 0.05));\r\n                g.textAlign = \"right\";\r\n                g.fillText(vertex.left, ...transform.screen(g, vertex.x - 0.05, vertex.y));\r\n                g.textAlign = \"left\";\r\n                g.fillText(vertex.right, ...transform.screen(g, vertex.x + 0.05, vertex.y));\r\n            }\r\n        },\r\n\r\n        addVertex: (x, y) => {\r\n            console.log(\"Remove vertex:\", id);\r\n\r\n            V[id] = { x, y, id, left: \"\", center: \"\", right: \"\", color: \"#000000\", hole: false };\r\n            E[id] = [];\r\n            id++;\r\n        },\r\n\r\n        addEdge: (from, to) => {\r\n            if (from === to) {\r\n                return;\r\n            }\r\n\r\n            if (E[from] === undefined) {\r\n                E[from] = [];\r\n            }\r\n\r\n            if (E[from].findIndex(x => x.id === to) === -1) {\r\n                if (!ud) {\r\n                    const reverseEdgeIndex = E[to].findIndex(x => x.id === from);\r\n\r\n                    if (reverseEdgeIndex !== -1 && E[to][reverseEdgeIndex].bezier === 0) {\r\n                        E[to][reverseEdgeIndex].bezier = 0.15;\r\n                        E[from].push({ id: to, label: \"\", center: \"\", extra: 0, color: \"#000000\", bezier: 0.15 });\r\n                    } else {\r\n                        E[from].push({ id: to, label: \"\", center: \"\", extra: 0, color: \"#000000\", bezier: 0 });\r\n                    }\r\n                } else {\r\n                    E[from].push({ id: to, label: \"\", center: \"\", extra: 0, color: \"#000000\", bezier: 0 });\r\n                }\r\n\r\n                \r\n                console.log(\"Add Edge:\", from, to);\r\n            }\r\n        },\r\n\r\n        removeVertex: (id) => {\r\n            console.log(\"Remove vertex:\", id);\r\n\r\n            for (let [_, edge] of Object.entries(E)) {\r\n                if (edge !== undefined) {\r\n                    let index = edge.findIndex(x => x.id == id);\r\n\r\n                    if (index !== -1) {\r\n                        edge.splice(index, 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            delete V[id];\r\n            delete E[id];\r\n        },\r\n\r\n        removeEdge: (from, to) => {\r\n            if (from === to) {\r\n                return;\r\n            }\r\n\r\n            if (E[from] === undefined) {\r\n                E[from] = [];\r\n            }\r\n\r\n            E[from] = E[from].filter(x => x.id !== to);\r\n            console.log(\"Remove Edge:\", from, to);\r\n        },\r\n\r\n        findVertex: (x, y) => {\r\n            for (let [_, vertex] of Object.entries(V)) {\r\n                let dist = Math.sqrt((x - vertex.x) ** 2 + (y - vertex.y) ** 2);\r\n\r\n                if (dist < 0.05) {\r\n                    return vertex.id;\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n    }\r\n}","const colors = [\r\n    '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080'\r\n];\r\n\r\nexport default function() {\r\n    return {\r\n        art: function(graph) {\r\n            let visited = {};\r\n            let children = {};\r\n\r\n            let pre = [];\r\n            let highestMemoise = {};\r\n            let time = 0;\r\n\r\n            for (const [_, vertex] of Object.entries(graph.vertices())) {\r\n                vertex.hole = false;\r\n            }\r\n\r\n            const loopA = vid => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n                children[vid] = [];\r\n\r\n                pre[vid] = time;\r\n                time++;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        children[vid].push(edge.id);\r\n                        loopA(edge.id);\r\n                    }\r\n                }\r\n            };\r\n\r\n            const highest = vid => {\r\n                // Return cache if possible\r\n                if (highestMemoise[vid] !== undefined) {\r\n                    return highestMemoise[vid];\r\n                }\r\n\r\n                let value = pre[vid];\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    // Back edge\r\n                    if (children[vid].indexOf(edge.id) === -1) {\r\n                        value = Math.min(value, pre[edge.id]);\r\n                    // Tree edge\r\n                    } else {\r\n                        value = Math.min(value, highest(edge.id));\r\n                    }\r\n                }\r\n\r\n                // Memoise\r\n                highestMemoise[vid] = value;\r\n                return value;\r\n            };\r\n\r\n            const findArts = (originId, vid) => {\r\n                for (let child of children[vid]) {\r\n                    if (highest(child) >= pre[vid] && vid !== originId) {\r\n                        graph.vertices()[vid].hole = true;\r\n                        // console.log(\"Tree: \", highestMemoise, pre);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for (let child of children[vid]) {\r\n                    findArts(originId, child);\r\n                }\r\n            }\r\n\r\n            for (const[_, origin] of Object.entries(graph.vertices())) {\r\n                let originId = origin.id;\r\n\r\n                pre = [];\r\n                time = 0;\r\n\r\n                if (visited[originId] === undefined) {\r\n                    loopA(originId);\r\n\r\n                    // Check root case\r\n                    if (children[originId].length >= 2) {\r\n                        origin.hole = true;\r\n                        // console.log(\"Root: \", children[originId]);\r\n                    }\r\n\r\n                    // Find arts\r\n                    findArts(originId, originId);\r\n                }\r\n            }\r\n        },\r\n\r\n        scc: function(graph) {\r\n            let visited = {};\r\n            let order = [];\r\n            let quotient = [];\r\n\r\n            const loopA = vid => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        loopA(edge.id);\r\n                    }\r\n                }\r\n\r\n                order.push(vid);\r\n            };\r\n\r\n            for (const[_, origin] of Object.entries(graph.vertices())) {\r\n                let originId = origin.id;\r\n\r\n                if (visited[originId] === undefined) {\r\n                    loopA(originId);\r\n                }\r\n            }\r\n\r\n            let graphT = graph.transpose();\r\n            let quotientIndex = 0;\r\n            visited = {};\r\n\r\n            const loopB = (quotientIndex, vid) => {\r\n                const v = graph.vertices()[vid];\r\n                visited[vid] = true;\r\n\r\n                for (const [_, edge] of Object.entries(graphT.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        loopB(quotientIndex, edge.id);\r\n                    }\r\n                }\r\n\r\n                quotient[quotientIndex].push(vid);\r\n            };\r\n\r\n            while (order.length > 0) {\r\n                const vertexId = order.pop();\r\n\r\n                if (visited[vertexId] === undefined) {\r\n                    quotient[quotientIndex] = [];\r\n                    loopB(quotientIndex, vertexId);\r\n                    quotientIndex++;\r\n                }\r\n            }\r\n\r\n            for (const [quotientIndex, quotientClass] of quotient.entries()) {\r\n                for (const vertexId of quotientClass) {\r\n                    graph.vertices()[vertexId].color = colors[quotient.length - 1 - quotientIndex];\r\n                }\r\n            }\r\n        },\r\n\r\n        dfs: function(graph, origin) {\r\n            let visited = {};\r\n            let time = 0;\r\n\r\n            const loop = vid => {\r\n                const v = graph.vertices()[vid];\r\n                time++;\r\n\r\n                visited[vid] = true;\r\n                v.left = time;\r\n\r\n                for (const [_, edge] of Object.entries(graph.edges()[vid])) {\r\n                    if (visited[edge.id] === undefined) {\r\n                        edge.color = \"#0000FF\";\r\n\r\n                        if (graph.iud()) {\r\n                            graph.edges()[edge.id].find(x => x.id === vid).color = \"#0000FF\";\r\n                        }\r\n\r\n                        loop(edge.id);\r\n                    }\r\n                }\r\n\r\n                time++;\r\n                v.right = time;\r\n            };\r\n\r\n            loop(origin.id);\r\n        },\r\n\r\n        bfs: function(graph, origin) {\r\n            origin.center = \"0\";\r\n            let level = 1;\r\n\r\n            let visited = {};\r\n            visited[origin.id] = true;\r\n\r\n            let frontier = [ origin.id ];\r\n            let next = [];\r\n\r\n            while (frontier.length > 0) {\r\n                for (const vertexId of frontier) {\r\n                    for (const [_, edge] of Object.entries(graph.edges()[vertexId])) {\r\n                        if (visited[edge.id] === undefined) {\r\n                            visited[edge.id] = true;\r\n                            next.push(edge.id);\r\n\r\n                            edge.extra = 2;\r\n                            graph.vertices()[edge.id].center = level;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                frontier = next;\r\n                next = [];\r\n                level++;\r\n            }\r\n        },\r\n\r\n        clear: function(graph) {\r\n            for (const [_, vertex] of Object.entries(graph.vertices())) {\r\n                vertex.left = \"\";\r\n                vertex.center = \"\";\r\n                vertex.right = \"\";\r\n\r\n                if (graph.edges()[vertex.id] !== undefined) {\r\n                    for (const [__, edge] of Object.entries(graph.edges()[vertex.id])) {\r\n                        edge.extra = 0;\r\n                        edge.color = \"#000000\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import graph_ from \"./graph\";\r\nimport algo_ from \"./algo\";\r\nimport * as transform from \"./screen\";\r\n\r\nconst canvas = document.querySelector(\"#canvas\");\r\nconst g = canvas.getContext(\"2d\");\r\nlet graph = graph_();\r\nconst algo = algo_();\r\nlet moveVertex = false;\r\nlet moveVertexId = undefined;\r\nlet moveEdge = false;\r\nlet moveEdgeId = undefined;\r\nlet removeEdge = false;\r\nlet removeEdgeId = undefined;\r\nlet directed = true;\r\n\r\nlet bfsHover = undefined;\r\nlet realHover = undefined;\r\n\r\nlet mouseX;\r\nlet mouseY;\r\n\r\nconst ModeNone = 0;\r\nconst ModeBFS = 1;\r\nconst ModeDFS = 2;\r\n\r\nlet mode = ModeNone;\r\n\r\nlet keys = [];\r\n\r\nconst resize = () => {\r\n    g.width = canvas.clientWidth;\r\n    g.height = canvas.clientHeight;\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = canvas.clientHeight;\r\n}\r\n\r\nconst updateBfs = (notForced) => {\r\n    let [x, y] = [mouseX, mouseY];\r\n\r\n    if (moveVertex) {\r\n        graph.vertices()[moveVertexId].x = x;\r\n        graph.vertices()[moveVertexId].y = y;\r\n    }\r\n\r\n    if (notForced === undefined) {\r\n        if (!directed) {\r\n            algo.art(graph);\r\n        }\r\n        algo.scc(graph);\r\n    }\r\n\r\n    const vertexId = graph.findVertex(x, y);\r\n    if (vertexId !== undefined) {\r\n        if (bfsHover !== vertexId || bfsHover === undefined) {\r\n            algo.clear(graph);\r\n            if (mode === ModeDFS) {\r\n                algo.dfs(graph, graph.vertices()[vertexId]);\r\n                algo.scc(graph);\r\n                if (!directed) {\r\n                    algo.art(graph);\r\n                }\r\n                bfsHover = vertexId;\r\n            } else if (mode === ModeBFS) {\r\n                algo.bfs(graph, graph.vertices()[vertexId]);\r\n                algo.scc(graph);\r\n                if (!directed) {\r\n                    algo.art(graph);\r\n                }\r\n                bfsHover = vertexId;\r\n            }\r\n        }\r\n    } else {\r\n        algo.clear(graph);\r\n        bfsHover = undefined;\r\n    }\r\n}\r\n\r\nconst loop = () => {\r\n    g.clearRect(0, 0, g.width, g.height);\r\n\r\n    if (moveEdge || removeEdge) {\r\n        let [x, y] = [mouseX, mouseY];\r\n\r\n        if (moveEdge) {\r\n            g.strokeStyle = \"#000000\";\r\n        } else {\r\n            g.strokeStyle = \"#FF0000\";\r\n        }\r\n\r\n        g.beginPath();\r\n\r\n        if (moveEdge) {\r\n            g.moveTo(...transform.screen(g, graph.vertices()[moveEdgeId].x, graph.vertices()[moveEdgeId].y));\r\n        } else {\r\n            g.moveTo(...transform.screen(g, graph.vertices()[removeEdgeId].x, graph.vertices()[removeEdgeId].y));\r\n        }\r\n\r\n        g.lineTo(...transform.screen(g, x, y));\r\n        g.stroke();\r\n    }\r\n\r\n    graph.draw(g, realHover);\r\n};\r\n\r\nconst call = () => {\r\n    loop();\r\n    requestAnimationFrame(call);\r\n};\r\n\r\ndocument.onkeydown = ev => {\r\n    keys[ev.keyCode] = true;\r\n};\r\n\r\ndocument.onkeyup = ev => {\r\n    keys[ev.keyCode] = undefined;\r\n\r\n    if (ev.keyCode === 84) {\r\n        graph = graph.transpose();\r\n        bfsHover = undefined;\r\n        updateBfs();\r\n    }\r\n};\r\n\r\ndocument.onclick = ev => {\r\n\r\n};\r\n\r\ndocument.onmousemove = ev => {\r\n    [mouseX, mouseY] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n    updateBfs(true);\r\n\r\n    realHover = graph.findVertex(mouseX, mouseY);\r\n};\r\n\r\ndocument.onmousedown = ev => {\r\n    let [x, y] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n\r\n    [mouseX, mouseY] = [x, y];\r\n\r\n    if (ev.button) {\r\n        if (keys[17] === undefined && keys[16] === undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            moveVertexId = graph.findVertex(x, y);\r\n\r\n            if (moveVertexId !== undefined) {\r\n                moveVertex = true;\r\n            }\r\n        }\r\n    } else {\r\n        if (keys[17] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            moveEdgeId = graph.findVertex(x, y);\r\n\r\n            if (moveEdgeId !== undefined) {\r\n                moveEdge = true;\r\n            }\r\n        } else if (keys[16] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n            removeEdgeId = graph.findVertex(x, y);\r\n\r\n            if (removeEdgeId !== undefined) {\r\n                removeEdge = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    bfsHover = undefined;\r\n    updateBfs();\r\n};\r\n\r\ndocument.onmouseup = ev => {\r\n    let [x, y] = transform.inverseScreen(g, ev.clientX, ev.clientY);\r\n\r\n    if (keys[16] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n        const vertexId = graph.findVertex(x, y);\r\n        if (vertexId !== undefined) {\r\n            graph.removeVertex(vertexId);\r\n        }\r\n    } else if (keys[17] !== undefined && !moveVertex && !moveEdge && !removeEdge) {\r\n        graph.addVertex(x, y);\r\n    }\r\n\r\n    if (ev.button) {\r\n        moveVertex = false;\r\n    } else {\r\n        if (!moveVertex && moveEdge && !removeEdge) {\r\n            const vertexId = graph.findVertex(x, y);\r\n            if (vertexId !== undefined) {\r\n                if (directed) {\r\n                    graph.addEdge(moveEdgeId, vertexId);\r\n                } else {\r\n                    graph.addEdge(moveEdgeId, vertexId);\r\n                    graph.addEdge(vertexId, moveEdgeId);\r\n                }\r\n            }\r\n        } else if (!moveVertex && !moveEdge && removeEdge) {\r\n            const vertexId = graph.findVertex(x, y);\r\n            if (vertexId !== undefined) {\r\n                if (directed) {\r\n                    graph.removeEdge(removeEdgeId, vertexId);\r\n                } else {\r\n                    graph.removeEdge(vertexId, removeEdgeId);\r\n                    graph.removeEdge(removeEdgeId, vertexId);\r\n                }\r\n            }\r\n        }\r\n\r\n        moveEdge = false;\r\n        removeEdge = false;\r\n    }\r\n\r\n    bfsHover = undefined;\r\n    updateBfs();\r\n};\r\n\r\nwindow.oncontextmenu = ev => {\r\n    return false;\r\n};\r\n\r\nwindow.onresize = () => {\r\n    resize();\r\n}\r\n\r\ndocument.querySelector(\"#buttonHelp\").onclick = () => {\r\n    alert(`\r\n        ==== CONTROLS ====\r\n        LMB = Move Camera\r\n        CTRL + LMB = Add Edge\r\n        SHIFT + LMB = Remove Edge\r\n        RMB = Move Vertex\r\n        CTRL + RMB = Add Vertex\r\n        SHIFT + RMB = Remove Vertex\r\n    `);\r\n};\r\n\r\ndocument.querySelector(\"#buttonClear\").onclick = () => {\r\n    graph = graph_();\r\n};\r\n\r\ndocument.querySelector(\"#buttonDirected\").onclick = () => {\r\n    graph = graph_();\r\n    directed = true;\r\n};\r\n\r\ndocument.querySelector(\"#buttonUndirected\").onclick = () => {\r\n    graph = graph_(true);\r\n    directed = false;\r\n};\r\n\r\ndocument.querySelector(\"#buttonBFS\").onclick = () => {\r\n    mode = ModeBFS;\r\n    updateBfs();\r\n};\r\n\r\ndocument.querySelector(\"#buttonDFS\").onclick = () => {\r\n    mode = ModeDFS;\r\n    updateBfs();\r\n};\r\n\r\ndocument.querySelector(\"#buttonNone\").onclick = () => {\r\n    mode = ModeNone;\r\n    updateBfs();\r\n};\r\n\r\nresize();\r\ncall();"]}